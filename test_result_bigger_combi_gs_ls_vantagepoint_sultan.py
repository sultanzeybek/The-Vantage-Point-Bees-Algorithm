# -*- coding: utf-8 -*-
"""Test_Result_Bigger_Combi_GS_LS_VantagePoint_Sultan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBjP8KBJfBjkKOUjJtRsTTPVVf5P2Ag0

**Bees Algorithm (Basic Version) for Combinatorial Optimisation Problem with the Vantage Point Bees Algorithm** by Sultan Zeybek

Using 6 TSPlib's Problems (Reinelt, 1991): 
1.Eil51; 2.Berlin52; 3.St70; 4.Eil76; 5.Pr76; 6.Rat99.

BA was develop by Pham et.al. in 2006 [1]. Initially, it is developed to solve Continuous Optimisation Problem.
The Searching Operators of the BA have to be modified from Random Real Number Generator to Random Integer Number Generator for solving the combinatorial Optimisation Problem.
This is the development version of Combinatorial BA, which use some options inside the Global Search and Local Search. You could choose either Random Permutation, Nearest Neighbour, or Domino sequence operator as Global Search. And Swap, Reversion, Insertion, or the combination of those three local search operators as your Local Search.

Reference

[1] Pham D.T., Ghanbarzadeh A., Koc E., Otri S., Rahim S., and Zaidi M. The Bees Algorithm, A Novel Tool for Complex Optimisation Problems. Proc 2nd Int Virtual Conf on Intelligent Production Machines and Systems (IPROMS 2006). 2006. Oxford: Elsevier, pp. 454-459.
"""

import numpy as np
import math
import random
import matplotlib.pyplot as plt
import tsplib95

class Model:
    def __init__(self,x,y):
        self.x = x
        self.y = y
        self.n = len(x)
    def Dis (self):
        n = self.n
        D = []
        for i in range (n):
            for j in range (n):
                D.append(round(np.sqrt((x[i] - x[j]) ** 2 + (y[i] - y[j]) ** 2)))
        D=np.array(D)
        D=D.reshape(n,n)
        return D


#print("Select your value -insert a number 1 to 6-")
#print(" 1.Eil51")
#print(" 2.Berlin52")
#print(" 3.St70")
#print(" 4.Eil76")
#print(" 5.Pr76")
#print(" 6.Rat99")


#print("Select your GS operator -insert a number 0 to 3-")

#print("Select your Local Search operator -insert a number 0 to 3-")
#print(" 0 --> Combination of Swap, Reversion, and Insertion")
#print(" 1 --> Swap")
#print(" 2 --> Reversion")
#print(" 3 --> Insertion")

val = 15
GS = 0
LS = 0

maxIt = 3000
nScoutBee = 40



problem = tsplib95.load('/Users/szeybek/Google Drive/00 Papers/00 VPBA/datasets/fl1577.tsp')

# Problem Selection
if val == 1:
    Prob = 'Eil51'
    x = [37, 49, 52, 20, 40, 21, 17, 31, 52, 51, 42, 31, 5, 12, 36, 52, 27, 17, 13, 57, 62, 42, 16, 8, 7, 27, 30, 43, 58, 58, 37, 38, 46, 61, 62, 63, 32, 45, 59, 5, 10, 21, 5, 30, 39, 32, 25, 25, 48, 56, 30]
    y = [52, 49, 64, 26, 30, 47, 63, 62, 33, 21, 41, 32, 25, 42, 16, 41, 23, 33, 13, 58, 42, 57, 57, 52, 38, 68, 48, 67, 48, 27, 69, 46, 10, 33, 63, 69, 22, 35, 15, 6, 17, 10, 64, 15, 10, 39, 32, 55, 28, 37, 40]
    BKS = 426
    Eil51 = Model(x,y)
    D=Eil51.Dis()
    n=Eil51.n
    Probx = Eil51.x
    Proby = Eil51.y
elif val == 2:   
    Prob = 'Berlin52'
    x = [565, 25, 345, 945, 845, 880, 25, 525, 580, 650, 1605, 1220, 1465, 1530, 845, 725, 145, 415, 510, 560, 300, 520, 480, 835, 975, 1215, 1320, 1250, 660, 410, 420, 575, 1150, 700, 685, 685, 770, 795, 720, 760, 475, 95, 875, 700, 555, 830, 1170, 830, 605, 595, 1340, 1740]
    y = [575, 185, 750, 685, 655, 660, 230, 1000, 1175, 1130, 620, 580, 200, 5, 680, 370, 665, 635, 875, 365, 465, 585, 415, 625, 580, 245, 315, 400, 180, 250, 555, 665, 1160, 580, 595, 610, 610, 645, 635, 650, 960, 260, 920, 500, 815, 485, 65, 610, 625, 360, 725, 245]
    BKS = 7542
    Berlin52 = Model(x,y)
    D=Berlin52.Dis()
    n=Berlin52.n
    Probx = Berlin52.x
    Proby = Berlin52.y
elif val == 3:   
    Prob = 'St70'
    x = [64, 80, 69, 72, 48, 58, 81, 79, 30, 42, 7, 29, 78, 64, 95, 57, 40, 68, 92, 62, 28, 76, 67, 93, 6, 87, 30, 77, 78, 55, 82, 73, 20, 27, 95, 67, 48, 75, 8, 20, 54, 63, 44, 52, 12, 25, 58, 5, 90, 41, 25, 37, 56, 10, 98, 16, 89, 48, 81, 29, 17, 5, 79, 9, 17, 74, 10, 48, 83, 84]
    y = [96, 39, 23, 42, 67, 43, 34, 17, 23, 67, 76, 51, 92, 8, 57, 91, 35, 40, 34, 1, 43, 73, 88, 54, 8, 18, 9, 13, 94, 3, 88, 28, 55, 43, 86, 99, 83, 81, 19, 18, 38, 36, 33, 18, 13, 5, 85, 67, 9, 76, 76, 64, 63, 55, 7, 74, 60, 82, 76, 60, 22, 45, 70, 100, 82, 67, 68, 19, 86, 94]
    BKS = 675
    St70 = Model(x,y)
    D=St70.Dis()
    n=St70.n
    Probx = St70.x
    Proby = St70.y
elif val == 4:
    Prob = 'Eil76'
    x = [22, 36, 21, 45, 55, 33, 50, 55, 26, 40, 55, 35, 62, 62, 62, 21, 33, 9, 62, 66, 44, 26, 11, 7, 17, 41, 55, 35, 52, 43, 31, 22, 26, 50, 55, 54, 60, 47, 30, 30, 12, 15, 16, 21, 50, 51, 50, 48, 12, 15, 29, 54, 55, 67, 10, 6, 65, 40, 70, 64, 36, 30, 20, 15, 50, 57, 45, 38, 50, 66, 59, 35, 27, 40, 40, 40]
    y = [22, 26, 45, 35, 20, 34, 50, 45, 59, 66, 65, 51, 35, 57, 24, 36, 44, 56, 48, 14, 13, 13, 28, 43, 64, 46, 34, 16, 26, 26, 76, 53, 29, 40, 50, 10, 15, 66, 60, 50, 17, 14, 19, 48, 30, 42, 15, 21, 38, 56, 39, 38, 57, 41, 70, 25, 27, 60, 64, 4, 6, 20, 30, 5, 70, 72, 42, 33, 4, 8, 5, 60, 24, 20, 37, 40]
    BKS = 538
    Eil76 = Model(x,y)
    D=Eil76.Dis()
    n=Eil76.n
    Probx = Eil76.x
    Proby = Eil76.y
elif val == 5:
    Prob = 'Pr76'
    x = [3600, 3100, 4700, 5400, 5608, 4493, 3600, 3100, 4700, 5400, 5610, 4492, 3600, 3100, 4700, 5400, 6650, 7300, 7300, 6650, 7300, 6650, 5400, 8350, 7850, 9450, 10150, 10358, 9243, 8350, 7850, 9450, 10150, 10360, 9242, 8350, 7850, 9450, 10150, 11400, 12050, 12050, 11400, 12050, 11400, 10150, 13100, 12600, 14200, 14900, 15108, 13993, 13100, 12600, 14200, 14900, 15110, 13992, 13100, 12600, 14200, 14900, 16150, 16800, 16800, 16150, 16800, 16150, 14900, 19800, 19800, 19800, 19800, 200, 200, 200]
    y = [2300, 3300, 5750, 5750, 7103, 7102, 6950, 7250, 8450, 8450, 10053, 10052, 10800, 10950, 11650, 11650, 10800, 10950, 7250, 6950, 3300, 2300, 1600, 2300, 3300, 5750, 5750, 7103, 7102, 6950, 7250, 8450, 8450, 10053, 10052, 10800, 10950, 11650, 11650, 10800, 10950, 7250, 6950, 3300, 2300, 1600, 2300, 3300, 5750, 5750, 7103, 7102, 6950, 7250, 8450, 8450, 10053, 10052, 10800, 10950, 11650, 11650, 10800, 10950, 7250, 6950, 3300, 2300, 1600, 800, 10000, 11900, 12200, 12200, 1100, 800]
    BKS = 108159
    Pr76 = Model(x,y)
    D=Pr76.Dis()
    n=Pr76.n
    Probx = Pr76.x
    Proby = Pr76.y    
elif val == 6:
    Prob = 'Rat99'
    x = [6, 15, 24, 33, 48, 57, 67, 77, 86, 6, 17, 23, 32, 43, 55, 65, 78, 87, 3, 12, 28, 33, 47, 55, 64, 71, 87, 4, 15, 22, 34, 42, 54, 66, 78, 87, 7, 17, 26, 32, 43, 57, 64, 78, 83, 5, 13, 25, 38, 46, 58, 67, 74, 88, 2, 17, 23, 36, 42, 53, 63, 72, 87, 2, 16, 25, 38, 42, 57, 66, 73, 86, 5, 13, 25, 35, 46, 54, 65, 73, 86, 2, 14, 28, 38, 46, 57, 63, 77, 85, 8, 12, 22, 34, 47, 58, 66, 78, 85]
    y = [4, 15, 18, 12, 12, 14, 10, 10, 15, 21, 26, 25, 35, 23, 35, 36, 39, 35, 53, 44, 53, 49, 46, 52, 50, 57, 57, 72, 78, 70, 71, 79, 77, 79, 67, 73, 81, 95, 98, 97, 88, 89, 85, 83, 98, 109, 111, 102, 119, 107, 110, 110, 113, 110, 124, 134, 129, 131, 137, 123, 135, 134, 129, 146, 147, 153, 155, 158, 154, 151, 151, 149, 177, 162, 169, 177, 172, 166, 174, 161, 162, 195, 196, 189, 187, 195, 194, 188, 193, 194, 211, 217, 210, 216, 203, 213, 206, 210, 204]
    BKS = 1211
    Rat99 = Model(x,y)
    D=Rat99.Dis()
    n=Rat99.n
    Probx = Rat99.x
    Proby = Rat99.y
elif val == 7:
    Prob = 'KroA100'
    x = [1380, 2848, 3510, 457, 3888, 984, 2721, 1286, 2716, 738, 1251, 2728, 3815, 3683, 1247, 123, 1234, 252, 611, 2576, 928, 53, 1807, 274, 2574, 178, 2678, 1795, 3384, 3520, 1256, 1424, 3913, 3085, 2573, 463, 3875, 298, 3479, 2542, 3955, 1323, 3447, 2936, 1621, 3373, 1393, 3874, 938, 3022, 2482, 3854, 376, 2519, 2945, 953, 2628, 2097, 890, 2139, 2421, 2290, 1115, 2588, 327, 241, 1917, 2991, 2573, 19, 3911, 872, 2863, 929, 839, 3893, 2178, 3822, 378, 1178, 2599, 3416, 2961, 611, 3113, 2597, 2586, 161, 1429, 742, 1625, 1187, 1787, 22, 3640, 3756, 776, 1724, 198, 3950]
    y = [939, 96, 1671, 334, 666, 965, 1482, 525, 1432, 1325, 1832, 1698, 169, 1533, 1945, 862, 1946, 1240, 673, 1676, 1700, 857, 1711, 1420, 946, 24, 1825, 962, 1498, 1079, 61, 1728, 192, 1528, 1969, 1670, 598, 1513, 821, 236, 1743, 280, 1830, 337, 1830, 1646, 1368, 1318, 955, 474, 1183, 923, 825, 135, 1622, 268, 1479, 981, 1846, 1806, 1007, 1810, 1052, 302, 265, 341, 687, 792, 599, 674, 1673, 1559, 558, 1766, 620, 102, 1619, 899, 1048, 100, 901, 143, 1605, 1384, 885, 1830, 1286, 906, 134, 1025, 1651, 706, 1009, 987, 43, 882, 392, 1642, 1810, 1558]
    BKS = 21282
    KroA100 = Model(x,y)
    D=KroA100.Dis()
    n=KroA100.n
    Probx = KroA100.x
    Proby = KroA100.y
elif val == 8:
    Prob = 'KroB100'
    x = [3140, 556, 3675, 1182, 3595, 962, 2030, 3507, 2642, 3438, 3858, 2937, 376, 839, 706, 749, 298, 694, 387, 2801, 3133, 1517, 1538, 844, 2639, 3123, 2489, 3834, 3417, 2938, 71, 3245, 731, 2312, 2426, 380, 2310, 2830, 3829, 3684, 171, 627, 1490, 61, 422, 2698, 2372, 177, 3084, 1213, 3, 1782, 3896, 1829, 1286, 3017, 2132, 2000, 3317, 1729, 2408, 3292, 193, 782, 2503, 1697, 3821, 3370, 3162, 3938, 2741, 2330, 3918, 1794, 2929, 3453, 896, 399, 2614, 2800, 2630, 563, 1090, 2009, 3876, 3084, 1526, 1612, 1423, 3058, 3782, 347, 3904, 2191, 3220, 468, 3611, 3114, 3515, 3060]
    y = [1401, 1056, 1522, 1853, 111, 1895, 1186, 1851, 1269, 901, 1472, 1568, 1018, 1355, 1925, 920, 615, 552, 190, 695, 1143, 266, 224, 520, 1239, 217, 1520, 1827, 1808, 543, 1323, 1828, 1741, 1270, 1851, 478, 635, 775, 513, 445, 514, 1261, 1123, 81, 542, 1221, 127, 1390, 748, 910, 1817, 995, 742, 812, 550, 108, 1432, 1110, 1966, 1498, 1747, 152, 1210, 1462, 352, 1924, 147, 791, 367, 516, 1583, 741, 1088, 1589, 485, 1998, 705, 850, 195, 653, 20, 1513, 1652, 1163, 1165, 774, 1612, 328, 1322, 1276, 1865, 252, 1444, 1579, 1454, 319, 1968, 1629, 1892, 155]
    BKS = 22141
    KroB100 = Model(x,y)
    D=KroB100.Dis()
    n=KroB100.n
    Probx = KroB100.x
    Proby = KroB100.y
elif val == 9:
    Prob = 'KroC100'
    x = [1357, 2650, 1774, 1307, 3806, 2687, 43, 3092, 185, 834, 40, 1183, 2048, 1097, 1838, 234, 3314, 737, 779, 2312, 2576, 3078, 2781, 705, 3409, 323, 1660, 3729, 693, 2361, 2433, 554, 913, 3586, 2636, 1000, 482, 3704, 3635, 1362, 2049, 2552, 3939, 219, 812, 901, 2513, 242, 826, 3278, 86, 14, 1327, 2773, 2469, 3835, 1031, 3853, 1868, 1544, 457, 3174, 192, 2318, 2232, 396, 2365, 2499, 1410, 2990, 3646, 3394, 1779, 1058, 2933, 3099, 2178, 138, 2082, 2302, 805, 22, 3213, 99, 1533, 3564, 29, 3808, 2221, 3499, 3124, 781, 1027, 3249, 3297, 213, 721, 3736, 868, 960]
    y = [1905, 802, 107, 964, 746, 1353, 1957, 1668, 1542, 629, 462, 1391, 1628, 643, 1732, 1118, 1881, 1285, 777, 1949, 189, 1541, 478, 1812, 1917, 1714, 1556, 1188, 1383, 640, 1538, 1825, 317, 1909, 727, 457, 1337, 1082, 1174, 1526, 417, 1909, 640, 898, 351, 1552, 1572, 584, 1226, 799, 1065, 454, 1893, 1286, 1838, 963, 428, 1712, 197, 863, 1607, 1064, 1004, 1925, 1374, 828, 1649, 658, 307, 214, 1018, 1028, 90, 372, 1459, 173, 978, 1610, 1753, 1127, 272, 1617, 1085, 536, 1780, 676, 6, 1375, 291, 1885, 408, 671, 1041, 378, 491, 220, 186, 1542, 731, 303]
    BKS = 20749
    KroC100 = Model(x,y)
    D=KroC100.Dis()
    n=KroC100.n
    Probx = KroC100.x
    Proby = KroC100.y
elif val == 10:
    Prob = 'KroD100'
    x = [2995, 202, 981, 1346, 781, 1009, 2927, 2982, 555, 464, 3452, 571, 2656, 1623, 2067, 1725, 3600, 1109, 366, 778, 386, 3918, 3332, 2597, 811, 241, 2658, 394, 3786, 264, 2050, 3538, 1646, 2993, 547, 3373, 460, 3060, 1828, 1021, 2347, 3535, 1529, 1203, 1787, 2740, 555, 47, 3935, 3062, 387, 2901, 931, 1766, 401, 149, 2214, 3805, 1179, 1017, 2834, 634, 1819, 1393, 1768, 3023, 3248, 1632, 2223, 3868, 1541, 2374, 1962, 3007, 3220, 2356, 1604, 2028, 2581, 2221, 2944, 1082, 997, 2334, 1264, 1699, 235, 2592, 3642, 3599, 1766, 240, 1272, 3503, 80, 1677, 3766, 3946, 1994, 278]
    y = [264, 233, 848, 408, 670, 1001, 1777, 949, 1121, 1302, 637, 1982, 128, 1723, 694, 927, 459, 1196, 339, 1282, 1616, 1217, 1049, 349, 1295, 1069, 360, 1944, 1862, 36, 1833, 125, 1817, 624, 25, 1902, 267, 781, 456, 962, 388, 1112, 581, 385, 1902, 1101, 1753, 363, 540, 329, 199, 920, 512, 692, 980, 1629, 1977, 1619, 969, 333, 1512, 294, 814, 859, 1578, 871, 1906, 1742, 990, 697, 354, 1944, 389, 1524, 1945, 1568, 706, 1736, 121, 1578, 632, 1561, 942, 523, 1090, 1294, 1059, 248, 699, 514, 678, 619, 246, 301, 1533, 1238, 154, 459, 1852, 165]
    BKS = 21389
    KroD100 = Model(x,y)
    D=KroD100.Dis()
    n=KroD100.n
    Probx = KroD100.x
    Proby = KroD100.y
elif val == 11:
    Prob = 'KroE100'
    x = [3477, 91, 3972, 198, 1806, 538, 3430, 2186, 1513, 2143, 53, 3404, 1034, 2823, 3104, 3232, 2790, 374, 741, 3083, 3502, 1280, 3326, 217, 2503, 3527, 739, 3548, 48, 1419, 1689, 3468, 1628, 382, 3029, 3646, 285, 1782, 1067, 2849, 920, 1741, 876, 2753, 2609, 3941, 3613, 1754, 2916, 2445, 3825, 2779, 201, 2502, 765, 3105, 1937, 3364, 3702, 2164, 3019, 3098, 3239, 3359, 2081, 1398, 618, 1878, 3803, 397, 3035, 2502, 3230, 3479, 958, 3423, 78, 96, 3431, 2053, 3048, 571, 3393, 2835, 144, 923, 989, 3061, 2977, 1668, 878, 678, 1086, 640, 3551, 106, 2243, 3796, 2643, 48]
    y = [949, 732, 329, 1632, 733, 1023, 1088, 766, 1646, 1611, 1657, 1307, 1344, 376, 1931, 324, 1457, 9, 146, 1938, 1067, 237, 1846, 38, 1172, 41, 1850, 1999, 154, 872, 1223, 1404, 253, 872, 1242, 1758, 1029, 93, 371, 1214, 1835, 712, 220, 283, 1286, 258, 523, 559, 1724, 1820, 1101, 435, 693, 1274, 833, 1823, 1400, 1498, 1624, 1874, 189, 1594, 1376, 1693, 1011, 1100, 1953, 59, 886, 1217, 152, 146, 380, 1023, 1670, 1241, 1066, 691, 78, 1461, 1, 1711, 782, 1472, 1185, 108, 1997, 1211, 39, 658, 715, 1599, 868, 110, 1673, 1267, 1332, 1401, 1320, 267]
    BKS = 22068
    KroE100 = Model(x,y)
    D=KroE100.Dis()
    n=KroE100.n
    Probx = KroE100.x
    Proby = KroE100.y
elif val == 12:
    Prob = 'KroA150'
    x = [1380, 2848, 3510, 457, 3888, 984, 2721, 1286, 2716, 738, 1251, 2728, 3815, 3683, 1247, 123, 1234, 252, 611, 2576, 928, 53, 1807, 274, 2574, 178, 2678, 1795, 3384, 3520, 1256, 1424, 3913, 3085, 2573, 463, 3875, 298, 3479, 2542, 3955, 1323, 3447, 2936, 1621, 3373, 1393, 3874, 938, 3022, 2482, 3854, 376, 2519, 2945, 953, 2628, 2097, 890, 2139, 2421, 2290, 1115, 2588, 327, 241, 1917, 2991, 2573, 19, 3911, 872, 2863, 929, 839, 3893, 2178, 3822, 378, 1178, 2599, 3416, 2961, 611, 3113, 2597, 2586, 161, 1429, 742, 1625, 1187, 1787, 22, 3640, 3756, 776, 1724, 198, 3950, 3477, 91, 3972, 198, 1806, 538, 3430, 2186, 1513, 2143, 53, 3404, 1034, 2823, 3104, 3232, 2790, 374, 741, 3083, 3502, 1280, 3326, 217, 2503, 3527, 739, 3548, 48, 1419, 1689, 3468, 1628, 382, 3029, 3646, 285, 1782, 1067, 2849, 920, 1741, 876, 2753, 2609, 3941, 3613, 1754, 2916, 2445]
    y = [939, 96, 1671, 334, 666, 965, 1482, 525, 1432, 1325, 1832, 1698, 169, 1533, 1945, 862, 1946, 1240, 673, 1676, 1700, 857, 1711, 1420, 946, 24, 1825, 962, 1498, 1079, 61, 1728, 192, 1528, 1969, 1670, 598, 1513, 821, 236, 1743, 280, 1830, 337, 1830, 1646, 1368, 1318, 955, 474, 1183, 923, 825, 135, 1622, 268, 1479, 981, 1846, 1806, 1007, 1810, 1052, 302, 265, 341, 687, 792, 599, 674, 1673, 1559, 558, 1766, 620, 102, 1619, 899, 1048, 100, 901, 143, 1605, 1384, 885, 1830, 1286, 906, 134, 1025, 1651, 706, 1009, 987, 43, 882, 392, 1642, 1810, 1558, 949, 1732, 329, 1632, 733, 1023, 1088, 766, 1646, 1611, 1657, 1307, 1344, 376, 1931, 324, 1457, 9, 146, 1938, 1067, 237, 1846, 38, 1172, 41, 1850, 1999, 154, 872, 1223, 1404, 253, 872, 1242, 1758, 1029, 93, 371, 1214, 1835, 712, 220, 283, 1286, 258, 523, 559, 1724, 1820]
    BKS = 26524
    KroA150 = Model(x,y)
    D=KroA150.Dis()
    n=KroA150.n
    Probx = KroA150.x
    Proby = KroA150.y
elif val == 13:
    Prob = 'KroB150'
    x = [1357, 2650, 1774, 1307, 3806, 2687, 43, 3092, 185, 834, 40, 1183, 2048, 1097, 1838, 234, 3314, 737, 779, 2312, 2576, 3078, 2781, 705, 3409, 323, 1660, 3729, 693, 2361, 2433, 554, 913, 3586, 2636, 1000, 482, 3704, 3635, 1362, 2049, 2552, 3939, 219, 812, 901, 2513, 242, 826, 3278, 86, 14, 1327, 2773, 2469, 3835, 1031, 3853, 1868, 1544, 457, 3174, 192, 2318, 2232, 396, 2365, 2499, 1410, 2990, 3646, 3394, 1779, 1058, 2933, 3099, 2178, 138, 2082, 2302, 805, 22, 3213, 99, 1533, 3564, 29, 3808, 2221, 3499, 3124, 781, 1027, 3249, 3297, 213, 721, 3736, 868, 960, 3825, 2779, 201, 2502, 765, 3105, 1937, 3364, 3702, 2164, 3019, 3098, 3239, 3359, 2081, 1398, 618, 1878, 3803, 397, 3035, 2502, 3230, 3479, 958, 3423, 78, 96, 3431, 2053, 3048, 571, 3393, 2835, 144, 923, 989, 3061, 2977, 1668, 878, 678, 1086, 640, 3551, 106, 2243, 3796, 2643, 48]
    y = [1905, 802, 107, 964, 746, 1353, 1957, 1668, 1542, 629, 462, 1391, 1628, 643, 1732, 1118, 1881, 1285, 777, 1949, 189, 1541, 478, 1812, 1917, 1714, 1556, 1188, 1383, 640, 1538, 1825, 317, 1909, 727, 457, 1337, 1082, 1174, 1526, 417, 1909, 640, 898, 351, 1552, 1572, 584, 1226, 799, 1065, 454, 1893, 1286, 1838, 963, 428, 1712, 197, 863, 1607, 1064, 1004, 1925, 1374, 828, 1649, 658, 307, 214, 1018, 1028, 90, 372, 1459, 173, 978, 1610, 1753, 1127, 272, 1617, 1085, 536, 1780, 676, 6, 1375, 291, 1885, 408, 671, 1041, 378, 491, 220, 186, 1542, 731, 303, 1101, 435, 693, 1274, 833, 1823, 1400, 1498, 1624, 1874, 189, 1594, 1376, 1693, 1011, 1100, 1953, 59, 886, 1217, 152, 146, 380, 1023, 1670, 1241, 1066, 691, 78, 1461, 1, 1711, 782, 1472, 1185, 108, 1997, 1211, 39, 658, 715, 1599, 868, 110, 1673, 1267, 1332, 1401, 1320, 267]
    BKS = 26130
    KroB150 = Model(x,y)
    D=KroB150.Dis()
    n=KroB150.n
    Probx = KroB150.x
    Proby = KroB150.y
elif val == 14:
    Prob = 'KroA200'
    x = [1357, 2650, 1774, 1307, 3806, 2687, 43, 3092, 185, 834, 40, 1183, 2048, 1097, 1838, 234, 3314, 737, 779, 2312, 2576, 3078, 2781, 705, 3409, 323, 1660, 3729, 693, 2361, 2433, 554, 913, 3586, 2636, 1000, 482, 3704, 3635, 1362, 2049, 2552, 3939, 219, 812, 901, 2513, 242, 826, 3278, 86, 14, 1327, 2773, 2469, 3835, 1031, 3853, 1868, 1544, 457, 3174, 192, 2318, 2232, 396, 2365, 2499, 1410, 2990, 3646, 3394, 1779, 1058, 2933, 3099, 2178, 138, 2082, 2302, 805, 22, 3213, 99, 1533, 3564, 29, 3808, 2221, 3499, 3124, 781, 1027, 3249, 3297, 213, 721, 3736, 868, 960, 1380, 2848, 3510, 457, 3888, 984, 2721, 1286, 2716, 738, 1251, 2728, 3815, 3683, 1247, 123, 1234, 252, 611, 2576, 928, 53, 1807, 274, 2574, 178, 2678, 1795, 3384, 3520, 1256, 1424, 3913, 3085, 2573, 463, 3875, 298, 3479, 2542, 3955, 1323, 3447, 2936, 1621, 3373, 1393, 3874, 938, 3022, 2482, 3854, 376, 2519, 2945, 953, 2628, 2097, 890, 2139, 2421, 2290, 1115, 2588, 327, 241, 1917, 2991, 2573, 19, 3911, 872, 2863, 929, 839, 3893, 2178, 3822, 378, 1178, 2599, 3416, 2961, 611, 3113, 2597, 2586, 161, 1429, 742, 1625, 1187, 1787, 22, 3640, 3756, 776, 1724, 198, 3950]
    y = [1905, 802, 107, 964, 746, 1353, 1957, 1668, 1542, 629, 462, 1391, 1628, 643, 1732, 1118, 1881, 1285, 777, 1949, 189, 1541, 478, 1812, 1917, 1714, 1556, 1188, 1383, 640, 1538, 1825, 317, 1909, 727, 457, 1337, 1082, 1174, 1526, 417, 1909, 640, 898, 351, 1552, 1572, 584, 1226, 799, 1065, 454, 1893, 1286, 1838, 963, 428, 1712, 197, 863, 1607, 1064, 1004, 1925, 1374, 828, 1649, 658, 307, 214, 1018, 1028, 90, 372, 1459, 173, 978, 1610, 1753, 1127, 272, 1617, 1085, 536, 1780, 676, 6, 1375, 291, 1885, 408, 671, 1041, 378, 491, 220, 186, 1542, 731, 303, 939, 96, 1671, 334, 666, 965, 1482, 525, 1432, 1325, 1832, 1698, 169, 1533, 1945, 862, 1946, 1240, 673, 1676, 1700, 857, 1711, 1420, 946, 24, 1825, 962, 1498, 1079, 61, 1728, 192, 1528, 1969, 1670, 598, 1513, 821, 236, 1743, 280, 1830, 337, 1830, 1646, 1368, 1318, 955, 474, 1183, 923, 825, 135, 1622, 268, 1479, 981, 1846, 1806, 1007, 1810, 1052, 302, 265, 341, 687, 792, 599, 674, 1673, 1559, 558, 1766, 620, 102, 1619, 899, 1048, 100, 901, 143, 1605, 1384, 885, 1830, 1286, 906, 134, 1025, 1651, 706, 1009, 987, 43, 882, 392, 1642, 1810, 1558]
    BKS = 29368
    KroA200 = Model(x,y)
    D=KroA200.Dis()
    n=KroA200.n
    Probx = KroA200.x
    Proby = KroA200.y
elif val == 15:
    Prob = 'TSP'
    problem = tsplib95.load('/Users/szeybek/Google Drive/00 Papers/00 VPBA/datasets/lin318.tsp')
    list = problem.node_coords
    x = []
    y = []

    for i in range(len(problem.node_coords)+1) :
       list = problem.node_coords.get(i)
       if list is not None:
         x.append(list[0])
         y.append(list[1])
    BKS = 22249
    TSP = Model(x,y)
    D=TSP.Dis()
    n=TSP.n
    Probx = TSP.x
    Proby = TSP.y
else:
    Prob = 'KroB200'
    x = [3140, 556, 3675, 1182, 3595, 962, 2030, 3507, 2642, 3438, 3858, 2937, 376, 839, 706, 749, 298, 694, 387, 2801, 3133, 1517, 1538, 844, 2639, 3123, 2489, 3834, 3417, 2938, 71, 3245, 731, 2312, 2426, 380, 2310, 2830, 3829, 3684, 171, 627, 1490, 61, 422, 2698, 2372, 177, 3084, 1213, 3, 1782, 3896, 1829, 1286, 3017, 2132, 2000, 3317, 1729, 2408, 3292, 193, 782, 2503, 1697, 3821, 3370, 3162, 3938, 2741, 2330, 3918, 1794, 2929, 3453, 896, 399, 2614, 2800, 2630, 563, 1090, 2009, 3876, 3084, 1526, 1612, 1423, 3058, 3782, 347, 3904, 2191, 3220, 468, 3611, 3114, 3515, 3060, 2995, 202, 981, 1346, 781, 1009, 2927, 2982, 555, 464, 3452, 571, 2656, 1623, 2067, 1725, 3600, 1109, 366, 778, 386, 3918, 3332, 2597, 811, 241, 2658, 394, 3786, 264, 2050, 3538, 1646, 2993, 547, 3373, 460, 3060, 1828, 1021, 2347, 3535, 1529, 1203, 1787, 2740, 555, 47, 3935, 3062, 387, 2901, 931, 1766, 401, 149, 2214, 3805, 1179, 1017, 2834, 634, 1819, 1393, 1768, 3023, 3248, 1632, 2223, 3868, 1541, 2374, 1962, 3007, 3220, 2356, 1604, 2028, 2581, 2221, 2944, 1082, 997, 2334, 1264, 1699, 235, 2592, 3642, 3599, 1766, 240, 1272, 3503, 80, 1677, 3766, 3946, 1994, 278]
    y = [1401, 1056, 1522, 1853, 111, 1895, 1186, 1851, 1269, 901, 1472, 1568, 1018, 1355, 1925, 920, 615, 552, 190, 695, 1143, 266, 224, 520, 1239, 217, 1520, 1827, 1808, 543, 1323, 1828, 1741, 1270, 1851, 478, 635, 775, 513, 445, 514, 1261, 1123, 81, 542, 1221, 127, 1390, 748, 910, 1817, 995, 742, 812, 550, 108, 1432, 1110, 1966, 1498, 1747, 152, 1210, 1462, 352, 1924, 147, 791, 367, 516, 1583, 741, 1088, 1589, 485, 1998, 705, 850, 195, 653, 20, 1513, 1652, 1163, 1165, 774, 1612, 328, 1322, 1276, 1865, 252, 1444, 1579, 1454, 319, 1968, 1629, 1892, 155, 264, 233, 848, 408, 670, 1001, 1777, 949, 1121, 1302, 637, 1982, 128, 1723, 694, 927, 459, 1196, 339, 1282, 1616, 1217, 1049, 349, 1295, 1069, 360, 1944, 1862, 36, 833, 125, 1817, 624, 25, 1902, 267, 781, 456, 962, 388, 1112, 581, 385, 1902, 1101, 1753, 363, 540, 329, 199, 920, 512, 692, 980, 1629, 1977, 1619, 969, 333, 1512, 294, 814, 859, 1578, 871, 1906, 1742, 990, 697, 354, 1944, 389, 1524, 1945, 1568, 706, 1736, 121, 1578, 632, 1561, 942, 523, 1090, 1294, 1059, 248, 699, 514, 678, 619, 246, 301, 1533, 1238, 154, 459, 1852, 165]
    BKS = 29437
    KroB200 = Model(x,y)
    D=KroB200.Dis()
    n=KroB200.n
    Probx = KroB200.x
    Proby = KroB200.y

def CostVantagePoint(D,VPtour):
  total=0
  D = np.matrix(D)
  VPtour = np.array(VPtour,dtype=int)
  for i in range(len(VPtour)):
    index1=i
    index2=i+1
    if i==n-1:
      total += D[VPtour[i],VPtour[0]]
    elif i<n-1:
      total += D[VPtour[index1],VPtour[index2]]
  return total
 
def Cost2(GS,tour,D):
  if GS==2:
    return CostVantagePoint(D,tour)
  else:
    L=0
    for i in range (len(tour)):
        if i< len(tour)-1:
          L += D[tour[i],tour[i+1]]
        else:
          L += D[tour[i],tour[0]]
    return L


def Cost1(tour,D):
  total=0
  print(tour)
  for i in range(len(tour)):
    index1=i
    index2=i+1
    if i==n-1:
      total += D.item(tour[i],tour[0])
      return total
    elif i<n-2:
      total += D.item(tour[index1],tour[index2])

def Cost(tour,D):
  L=0
  for i in range(len(tour)):
    if i<n-1:
      L += D[tour[i],tour[i+1]]
    else:
      L += D[tour[i],tour[0]]
  return L

class VantagePointTour(object):
    def __init__(self,citySize,distanceMatrix,distanceList,initial_indexList,recruitment_distances,
                 median_distances,pivot,selected_distance,median,totalWay,citiesList):
        self.citySize = citySize
        self.distanceMatrix = distanceMatrix
        self.distanceList = distanceList
        self.initial_indexList = initial_indexList 
        self.recruitment_distances = recruitment_distances
        self.median_distances = median_distances
        self.pivot = pivot
        self.selected_distance = selected_distance
        self.median = median
        self.totalWay = totalWay
        self.citiesList = citiesList    
    def __getmedian__(self):
        return self.median

    def __getdistancesList__(self):
        return self.distanceList

    def calculateTotalWay(self):
        totalWay = 0 
        for i in range(len(distanceList)):
            totalWay = totalWay + distanceList[i]
            return totalWay

    def calculate_median(distances):
        middle = len(distances)/2
        if len(distances)%2 == 1:
            return distances[middle]
        else:
            return (distances[middle-1] + distances[middle]) / 2.0

    def addElementToIndexList(initial_indexList,pivot):
        initial_indexList.append(pivot)

    def addElementToRecruitmentDistances(dist):
        recruitment_distances.append(dist)

    citySize:int
    distanceMatrix: [[]]
    distanceList: []
    initial_indexList: []
    recruitment_distances: []
    median_distances: []
    pivot:int
    selected_distance:int
    median:float    
    totalWay:float
    citiesList: []


def calculate_median(tour,recruitment_distances):  
    if len(recruitment_distances)>=2:
      recruitment_distances.sort()
      middle = int (len(recruitment_distances)/2)    
      if len(recruitment_distances)%2 == 1:
        #middle = int((len(recruitment_distances)+1)/2)        
        tour.median = recruitment_distances[middle]        
      else:
        tour.median = (recruitment_distances[middle-1] + recruitment_distances[middle]) / 2.0	       				
    if len(recruitment_distances) == 1:
      tour.median = 0
      tour.selected_distance = recruitment_distances[0]
      #print(tour.median)
      #print(tour.selected_distance)
		
		
def select_DistanceFromMedian(tour,dynamic_metrics,median):
   left_pivotList = [] 
   for i in range(len(dynamic_metrics)):
      if(dynamic_metrics[i] < median/len(dynamic_metrics)):
         left_pivotList.append(dynamic_metrics[i])    
   if len(left_pivotList)>=1:
     if median!=0:
       index = random.randrange(len(left_pivotList))
       selected_distance=left_pivotList[index]
       tour.selected_distance=selected_distance
       tour.distanceList.append(selected_distance) 
   if len(left_pivotList) == 0:
     if len(dynamic_metrics)!=0:
       dynamic_metrics.sort()
       tour.selected_distance=dynamic_metrics[0]
       tour.distanceList.append(dynamic_metrics[0])
		

def newPivotFromSelectedDistance(recruitment_dist,selected_distance,tour):
  for i in range(len(recruitment_dist)):
    if recruitment_dist[i]==selected_distance:
      if i not in tour.initial_indexList:
        if i!=tour.citySize:
          tour.pivot=i
          tour.citiesList.append(tour.pivot)
          break
			
def getRecruitmentMetrics(matrix,pivot,tour):
  recruitments = []
  for j in range(matrix.shape[0]):
    if matrix.item(pivot,j) != 0:
      recruitments.append(matrix.item(pivot,j))	
      #print(recruitments)	
  return recruitments

def refreshBlackList(matrix,tour):
  tour.initial_indexList.append(tour.pivot)
  tour.median_distances.clear()
  tour.recruitment_distances.clear()


def getDynamicMetrics(matrix,tour):
  for j in range(n):
    if j not in tour.initial_indexList:
      if matrix.item(tour.pivot,j) != 0:
        tour.median_distances.append(matrix.item(tour.pivot,j))
    tour.recruitment_distances.append(matrix.item(tour.pivot,j))					
  
  calculate_median(tour,tour.median_distances)
  select_DistanceFromMedian(tour,tour.median_distances,tour.median)
  newPivotFromSelectedDistance(tour.recruitment_distances,tour.selected_distance,tour)
  refreshBlackList(matrix,tour)

    
def generate_RecruitmentTour(matrix,tour):
  for i in range(n):
    if len(tour.initial_indexList) == n:
      #print(tour.initial_indexList[0])
      #tour.distanceList.append(matrix.item(tour.initial_indexList[(len(tour.initial_indexList))-1],tour.initial_indexList[0]))
      #tour.calculateTotalWay
      #print(tour.total_way)
      break
    else:
      getDynamicMetrics(matrix,tour)
  return tour
	


def RecruitmentSearch(matrix,local_tour,initial_pivot):
  local_tour.initial_indexList.append(initial_pivot)
  local_tour.pivot = initial_pivot
  local_tour.citiesList.append(initial_pivot)
  return generate_RecruitmentTour(matrix,local_tour)


def VantagePointSeach(GS,n):    
    model = Model(x,y)
    D = model.Dis()
    n = model.n
    citiesList = []
    D2 = np.matrix(np.ones((n,n)))
    for i in range(n):
      for j in range(n):
         D2[i,j]=D[i,j]
    
    vantage_point = random.randrange(n-1)
    tour = VantagePointTour(n,distanceMatrix=D2,distanceList=[],initial_indexList=[],
                            recruitment_distances=[],median_distances=[],
                            pivot=vantage_point,selected_distance=0,median=0,totalWay=0,citiesList=citiesList)
    recruit_tour = RecruitmentSearch(D2,tour,vantage_point)
    return recruit_tour

#count = 0
#for i in range(1000):   
  #VP=VantagePointSeach(GS,n)
  #if len(VP.citiesList)>51:
    #break
  #else:
    #print(i)
    #count +=1
    #print(np.array(VP.citiesList))
    #print(len(VP.citiesList))
#print(count)
#print(VP.totalWay)

def GlobalSearch (GS,n,pl):
    if GS == 0:      
        IS = np.random.permutation(n)
        IS = np.array(IS)
        IS = IS.tolist()
       # print(IS)
    elif GS == 1: # Nearest Neighbour
        s = np.random.randint(n)
        D2=D
        D2=np.array(D2)
        n= len(D2)
        IS=[]
        IS.append(s)
        for i in range(1,n):
            s=IS[-1]
            D2[s,:] = np.inf
            temp = list(D2[:,s])
            IS.append(temp.index(min(temp)))
    elif GS == 2: #Vantage Point Search
        VP = VantagePointSeach(GS,n)
        IS = VP.citiesList
        IS = np.asarray(IS)
        #print(IS)

    else:  # Domino sequence operator 
        D2=np.matrix(np.ones((n+1,n+1)) * np.inf)
        for i in range(n):
            for j in range(n):
                D2[i,j]=D[i,j]
        #pl = m[1]      # set the number of players (pl).
        c = np.random.permutation (n)
        c = c+1
        m=math.ceil(n/pl)
        c=np.array(c)
        c.resize(pl,m)
        I = np.random.randint(1,n+1)
        E=[]
        E.append(I)
        T=[]
        T.append(I)
        c[c==I] = 0
        while sum(sum(c)) > 0:
            for i in range(pl):
                FromTo = c[i,:]
                Dis_E = []
                Dis_T = []
                for j in range (m):
                    Dis_E.append(D2[FromTo[j]-1,E[0]-1]) 
                    Dis_T.append(D2[T[-1]-1,FromTo[j]-1])
                minE = min(Dis_E)
                minT = min(Dis_T)
                Id_minE = np.argmin(Dis_E)
                Id_minT = np.argmin(Dis_T)
                if minE <= minT: 
                    E.insert(0,FromTo[Id_minE])
                    c[c==FromTo[Id_minE]] = 0
                else:
                    T.append(FromTo[Id_minT])
                    c[c==FromTo[Id_minT]] = 0
        E = np.array(E)
        E = E[E!=0]
        T = np.array(T)
        T = T[T!=0]
        E = np.array(E)
        E = E.tolist()
        E.pop(-1)
        T = np.array(T)
        T = T.tolist()
        IS = E+T
        IS = (np.array(IS))-1
    IS = np.array(IS)
    IS = IS.tolist()
    return IS

def LocalSearch (x,LS):   # Random using Reversion, Swap, Insertion
    if LS == 0:
        m = np.random.randint(1, 4) # The Combination of Swap, Reversion, and Insertion
    else:
        m = LS
    x = np.array(x)
    x = x.tolist()
    n = len(x)
    if m == 1: # SWAP
        for i in range(np.random.choice(range(2), 1)[0]):
            i1, i2 = np.random.choice(range(n), 2, False)
            x[i1], x[i2] = x[i2], x[i1]
    elif m == 2: # REVERSION (2-OPT)
        i = np.random.randint(0,n,2)
        i1 = min(i)
        i2 = max(i)
        z=x
        tuple(z)
        y=x[i1:i2]
        y=y[::-1]
        x=z
        x=np.array(x)
        for i in range(i1,i2):
            x[i]=y[i-i1]
    
    elif m == 3: # INSERTION
        temp = x[np.random.choice(range(n), 1)[0]]
        x=np.array(x)
        x = x.tolist()
        x.remove(temp)
        x.insert(np.random.choice(range(n-1), 1)[0], temp)
    #x=np.array(x)
    return x

#print(LocalSearch([1,2,3,4,5,6], 3))

class Bee:
    def __init__(self,Position,Cost):
        self.Position = Position
        self.Cost = Cost

# Setting Parameters of Bees Algorithm
VarSize = [1, n]  # Decision Variables Matrix Size
nSelectedSite = 1  # m = Number of Selected Sites
nEliteSite = 20 # e = Number of Selected Elite Sites
nSelectedSiteBee = 16  # nsp = Number of Selected Recruited Bees for Selected (m-e) Sites
nEliteSiteBee = 40  # nep = Number of Recruited Bees for Elite Sites

# Initialization
bee=[]
for i in range(nScoutBee):
    bee.append([])
    tour = GlobalSearch(GS,n,1)
    tour = np.array(tour)
    bee[i]=Bee(tour,Cost(tour,D))
    print(Cost(tour,D))

bee.sort(key=lambda bee: bee.Cost, reverse=False)

BestSol = ([],math.inf)
BestSol = bee[0]

BestCost = np.zeros([maxIt,1])
BestPos = []
for i in range(maxIt):
    BestPos.append([])

newbee=Bee([],[])

# Main Loop
for it in range(maxIt):
    # Elite Sites
    for i in range(nEliteSite):

        bestnewbee=Bee([],math.inf)

        for j in range(nEliteSiteBee):
            newbee.Position = LocalSearch(bee[i].Position, LS)
            newbee.Cost = Cost(newbee.Position,D)
            if newbee.Cost < bestnewbee.Cost:
                bestnewbee.Cost = newbee.Cost
                bestnewbee.Position = newbee.Position

        if bestnewbee.Cost < bee[i].Cost:
            bee[i].Cost = bestnewbee.Cost
            bee[i].Position = bestnewbee.Position

    # Selected Non-Elite Sites
    for i in range(nEliteSite,nSelectedSite):

        bestnewbee=Bee([],math.inf)

        for j in range(nSelectedSiteBee):
            newbee.Position = LocalSearch(bee[i].Position, LS)
            newbee.Cost = Cost(newbee.Position,D)
            if newbee.Cost < bestnewbee.Cost:
                bestnewbee.Cost = newbee.Cost
                bestnewbee.Position = newbee.Position

        if bestnewbee.Cost < bee[i].Cost:
            bee[i].Cost = bestnewbee.Cost
            bee[i].Position = bestnewbee.Position

    # Non - Selected Sites
    for i in range(nSelectedSite,nScoutBee):
        tour = GlobalSearch (GS,n,0)
        tour = np.array(tour)
        bee[i]=Bee(tour,Cost(tour,D))

    # Sort
    bee.sort(key=lambda bee: bee.Cost, reverse=False)

    # Update
    BestSol.Cost = bee[0].Cost
    BestSol.Position = bee[0].Position

    # Store Best Cost ever found
    BestCost[it] = BestSol.Cost
    BestPos [it] = BestSol.Position
    # Display Iteration Information
    print(['Iteration ' + str(it) + ': Best Cost = ' + str(BestCost[it])])

print(BKS)
print(BestCost[it])
print(BestPos [it])

## Drawing the solutions 
    # x and y axis values 
tour =BestSol.Position
tour = np.array(tour)
tour = tour.tolist()
tour.append(tour[0])
tx=[]
ty=[]
for i in tour:
  tx.append(Probx[i])
  ty.append(Proby[i])
x = tx
y = ty  
# plotting the points  
plt.plot(x, y, color='green', linestyle='dashed', linewidth = 1, 
marker='o', markerfacecolor='blue', markersize=5) 
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
# giving a title to my graph 
plt.title("Iteration " + str(it)) 
# function to show the plot 
plt.show()

print(BKS)
print(BestCost[it])
print(BestPos [it])

#print(" 0 --> Combination of Swap, Reversion, and Insertion")
#print(" 1 --> Swap")
#print(" 2 --> Reversion")
#print(" 3 --> Insertion")
print(LS)